"use strict";var ApplicationConfiguration=function(){var applicationModuleName="quiztructor",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("quizzes"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),window.fbAsyncInit=function(){FB.init({appId:"351073508400675",xfbml:!0,version:"v2.1"})},function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];d.getElementById(id)||(js=d.createElement(s),js.id=id,js.src="//connect.facebook.net/en_US/sdk.js",fjs.parentNode.insertBefore(js,fjs))}(document,"script","facebook-jssdk"),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$location",function($scope,Authentication,Menus,$location){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.isNotHome=function(route){return route!==$location.path()}}]),angular.module("core").controller("HomeController",["$scope","Authentication","$window","$location",function($scope,Authentication,$window){$scope.authentication=Authentication,$scope.screenHeight=function(){return $window.innerHeight+"px"}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("questions").directive("question",function(){return{restrict:"E",templateUrl:"modules/questions/views/create-question.client.view.html",link:function(){}}}).directive("questionForm",["$compile","AddOption",function($compile,AddOption){return{restrict:"E",templateUrl:"modules/questions/views/_create-question-form.client.view.html",controller:["$scope",function($scope){$scope.index=1,$scope.questionOptions=[],$scope.$watch(function(){for(var i=0;i<$scope.questionOptions.length;i++)void 0===$scope.questionOptions[i]&&$scope.questionOptions.splice(i,1)}),$scope.questionArray=[],$scope.answer="",$scope.addQuestion=function(){if(""!==$scope.answer){var question={question:$scope.question,questionOptions:$scope.questionOptions,answer:$scope.answer};$scope.questionArray.push(question),$scope.question="",$scope.questionOptions=[],$scope.answer=""}else alert("You have to select an answer")}}],link:function(scope){scope.addOption=function(){return AddOption.addOption(scope,$compile)},scope.removeQuestion=function(index){confirm("Are you sure you want to delete this question? This action cannot be undone")&&scope.questionArray.splice(index,1)}}}}]).directive("theQuestions",["$timeout","$modal","ProcessQuiz","$stateParams",function($timeout,$modal,ProcessQuiz,$stateParams){return{restrict:"E",templateUrl:"modules/questions/views/view-question.client.view.html",controller:["$scope",function($scope){$scope.markQuiz=function(){$scope.userAnswerArray.push(this.userAnswer);var result=new ProcessQuiz({quizId:$stateParams.quizId,userAnswer:$scope.userAnswerArray});result.$save(function(response){$scope.response=response;$modal.open({templateUrl:"modules/quizzes/views/show-quiz-result.client.view.html",controller:"ShowResultCtrl",size:"sm",backdrop:"static",keyboard:!1,resolve:{scores:function(){return $scope.response}}})},function(error){console.log(error)})}}],link:function(scope){scope.count=0,scope.userAnswer="",scope.done=!1,scope.userAnswerArray=[],scope.selected=function(){scope.count===scope.quiz.questions.length&&(scope.done=!0)},scope.getNextQuestion=function(){""!==this.userAnswer&&scope.userAnswerArray.push(this.userAnswer),$timeout(function(){scope.currentQuestion=scope.quiz.questions[scope.count],scope.count++},500)},scope.getNextQuestion(0)}}}]).controller("ShowResultCtrl",["$scope","$modalInstance","scores","$location",function($scope,$modalInstance,scores,$location){$scope.response=scores,$scope.cancel=function(){$modalInstance.dismiss("cancel"),$location.path("/quizzes")}}]),angular.module("questions").factory("QuestionService",["$resource",function($resource){return $resource("quizzes/:quizId/q/:questionId",{quizId:"@quizId",questionId:"@questionId"})}]).factory("ProcessQuiz",["$resource",function($resource){return $resource("quizzes/:quizId/process",{quizId:"@quizId"})}]),angular.module("quizzes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listQuizzes",{url:"/quizzes",templateUrl:"/modules/quizzes/views/list-quizzes.client.view.html"}).state("createQuiz",{url:"/quiz/create",templateUrl:"/modules/quizzes/views/create-quiz.client.view.html"}).state("showQuiz",{url:"/quiz/:quizId",templateUrl:"/modules/quizzes/views/view-quiz.client.view.html"})}]),angular.module("quizzes").controller("QuizController",["$scope","QuizService","$stateParams","$location","Authentication","QuestionService","$modal",function($scope,QuizService,$stateParams,$location,Authentication,QuestionService,$modal){$scope.user=Authentication.user,$scope.createQuiz=function(){var quiz=new QuizService({quizName:this.quizName,category:this.category,description:this.description});quiz.$save(function(response){$scope.quizId=response._id,$scope.quizSlug=response.slug;for(var j=0;j<$scope.questionOptions.length;j++)void 0===$scope.questionOptions[j]&&$scope.questionOptions.splice(j,1);for(var i=0;i<$scope.questionArray.length;i++){var question=new QuestionService({quizId:response._id,question:$scope.questionArray[i].question,questionOptions:$scope.questionArray[i].questionOptions,answer:$scope.questionArray[i].answer});question.$save(),$scope.done=!0}$scope.$watch(function(){$scope.done&&$location.path($scope.quizSlug)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.getQuiz=function(){$scope.quiz=QuizService.get({quizId:$stateParams.quizId},function(){$scope.quiz.user&&$scope.user&&$scope.quiz.user._id===$scope.user._id&&($scope.isAuthor=!0)},function(err){console.log(err)})},$scope.listQuizzes=function(){$scope.quizzes=QuizService.query()},$scope.removeQuiz=function(){confirm("Are you sure you want to delete this quiz? This action cannot be undone!")&&$scope.quiz.$remove(function(){$location.path("quizzes")})},$scope.remove=function(){if(confirm("Are you sure you want to delete this question? This action cannot be undone!")){var question=$scope.quiz.questions[this.$index];$scope.quiz.questions.splice(this.$index,1),QuestionService.delete({quizId:$stateParams.quizId,questionId:question._id},{},function(){},function(){})}},$scope.loadForm=function(){$modal.open({templateUrl:"modules/questions/views/_add-question-form.client.view.html",controller:"LoadFormCtrl",resolve:{question:function(){return{question:$scope.question,questionOptions:$scope.questionOptions,answer:$scope.answer}}}})},$scope.editQuiz=function(){$modal.open({templateUrl:"modules/quizzes/views/_edit-quiz-form.client.view.html",controller:"LoadEditQuizFormCtrl",size:"",resolve:{question:function(){return{quizName:$scope.quizName,description:$scope.description,category:$scope.category}}}})},$scope.takeQuiz=function(){$scope.takethequiz=!0},$scope.share=function(){FB.ui({method:"share",href:$location.absUrl()},function(){})}}]).controller("LoadFormCtrl",["$scope","$window","AddOption","$compile","$stateParams","QuestionService","$modalInstance",function($scope,$window,AddOption,$compile,$stateParams,QuestionService,$modalInstance){$scope.index=1,$scope.addOption=function(){return AddOption.addOption($scope,$compile)},$scope.questionOptions=[],$scope.postQuestion=function(){var questionObj=new QuestionService({quizId:$stateParams.quizId,question:$scope.question,questionOptions:$scope.questionOptions,answer:$scope.answer});questionObj.$save(function(){$window.location.reload()})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("LoadEditQuizFormCtrl",["$scope","QuizService","$modalInstance","$location","$window","$stateParams",function($scope,QuizService,$modalInstance,$location,$window,$stateParams){$scope.quiz=QuizService.get({quizId:$stateParams.quizId}),$scope.postQuiz=function(){var quiz=$scope.quiz;quiz.$update(function(){var link=""!==$scope.quiz.slug?$scope.quiz.slug:$scope.quiz._id;$modalInstance.close(),$location.path()==="/quiz/"+link?$window.location.reload():$location.path("/quiz/"+link)},function(){})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("quizzes").factory("QuizService",["$resource",function($resource){return $resource("quizzes/:quizId",{quizId:"@_id"},{update:{method:"PUT"}})}]).factory("AddOption",function(){return{addOption:function(scope,compile){scope.index++,angular.element(document.getElementById("optionDiv")).append(compile('<tr><td><div class="form-group"><div class="col-md-12"><input class="form-control" type="text" name="option" data-ng-model="questionOptions['+scope.index+']" placeholder="option '+(scope.index+1)+'" required></div></div></td><td><input type="radio" name="optionanswer" value="{{questionOptions['+scope.index+']}}" data-ng-model="answer"><br></td></tr>')(scope))}}}),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);